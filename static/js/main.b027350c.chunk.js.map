{"version":3,"sources":["Components/MemeMaker.js","App.js","index.js"],"names":["photos","src","MemeMaker","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","toggle","setState","prevState","modalIsOpen","topText","bottomText","updateTopTextValue","event","text","document","getElementById","value","updateBottomTextValue","openImage","index","image","baseImage","Image","concat","process","base64","getBase64Image","console","log","currentImage","currentImageBase64","canvas","createElement","width","height","getContext","drawImage","toDataURL","setHeightAndWidth","state","downloadMeme","svg","svgSize","getBoundingClientRect","img","svgData","XMLSerializer","serializeToString","setAttribute","btoa","onload","canvasdata","a","download","href","click","isTopDragging","isBottomDragging","topY","topX","bottomY","bottomX","isLoading","Array","length","fill","fontStyle","fontFamily","fontSize","textTransform","stroke","userSelect","_createClass","key","_this2","newDimension","this","React","className","map","photo","Spinner","color","type","alt","style","display","onClick","onLoad","_toConsumableArray","Modal","isOpen","contentClassName","ModalHeader","ModalBody","id","x","y","dominantBaseline","textAnchor","Form","FormGroup","Label","for","Input","name","placeholder","onChange","bsSize","Button","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b027350c.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, ModalHeader, ModalBody, Button, Form, FormGroup, Label, Input, Spinner } from 'reactstrap';\n\n// Storing files in this manner has consequences\n// Source: https://create-react-app.dev/docs/using-the-public-folder/\nconst photos = [\n  { src: 'images/vict-baby.png' },\n  { src: 'images/ned.jpeg' },\n  { src: 'images/devilgirl.jpg' },\n  { src: 'images/trump.jpg' },\n  { src: 'images/one-does-not.jpg' },\n  { src: 'images/dank.png' },\n  { src: 'images/boy.png' },\n  { src: 'images/sad.png' },\n  { src: 'images/wolf.png' },\n  { src: 'images/fry.jpg' },\n  { src: 'images/jobs.jpg' },\n  { src: 'images/phone.jpg' },\n  { src: 'images/oldie.png' },\n  { src: 'images/image.png' },\n  { src: 'images/doubt.png' },\n  { src: 'images/crying.png' },\n  { src: 'images/sponge.png' },\n  { src: 'images/dog.png' },\n  { src: 'images/frust.png' },\n  { src: 'images/web.png' },\n  { src: 'images/penguin.png' }\n];\n\nclass MemeMaker extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentImage: 0,\n      modalIsOpen: false,\n      currentImageBase64: null,\n      topText: '',\n      bottomText: '',\n      isTopDragging: false,\n      isBottomDragging: false,\n      topY: \"10%\",\n      topX: \"50%\",\n      bottomY: \"90%\",\n      bottomX: \"50%\",\n      isLoading: Array(photos.length).fill(true)\n    };\n    this.fontStyle = {\n      fontFamily: \"Impact\",\n      fontSize: \"50px\",\n      textTransform: \"uppercase\",\n      fill: \"#FFF\",\n      stroke: \"#000\",\n      userSelect: \"none\"\n    }\n  }\n\n  toggle = () => {\n    this.setState((prevState) => ({\n      modalIsOpen: !prevState.modalIsOpen,\n      topText: '',\n      bottomText: ''\n    }));\n  }\n\n  updateTopTextValue = (event) => {\n    const text = document.getElementById(\"toptext\").value;\n    this.setState({\n      topText: text\n    });\n  }\n\n  updateBottomTextValue = (event) => {\n    const text = document.getElementById(\"bottomtext\").value;\n    this.setState({\n      bottomText: text\n    });\n  }\n\n  openImage = (index) => {\n    const image = photos[index];\n    const baseImage = new Image();\n    baseImage.src = `${process.env.PUBLIC_URL}/${image.src}`;\n    const\n      base64 = this.getBase64Image(baseImage);\n    console.log(base64);\n    this.setState((prevState) => ({\n      currentImage: index,\n      modalIsOpen: !prevState.modalIsOpen,\n      currentImageBase64: base64,\n    }));\n  }\n\n  getBase64Image = (image) => {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0);\n    const dataURL = canvas.toDataURL(\"image/png\");\n    return dataURL;\n  }\n\n  setHeightAndWidth = () => {\n    const image = photos[this.state.currentImage];\n    const baseImage = new Image();\n    baseImage.src = `${process.env.PUBLIC_URL}/${image.src}`;\n    const widthHeightRatio = baseImage.width / baseImage.height;\n    const newWidth = 600;\n    const newHeight = newWidth / widthHeightRatio;\n    return [newWidth, newHeight];\n  }\n\n  downloadMeme = () => {\n    const svg = document.getElementById(\"svg-ref\");\n    const canvas = document.createElement(\"canvas\");\n    const svgSize = svg.getBoundingClientRect();\n    canvas.width = svgSize.width;\n    canvas.height = svgSize.height;\n\n    const img = document.createElement(\"img\");\n    const svgData = new XMLSerializer().serializeToString(svg);\n    img.setAttribute(\"src\", \"data:image/svg+xml;base64,\" + btoa(svgData));\n\n    img.onload = function () {\n      canvas.getContext(\"2d\").drawImage(img, 0, 0);\n      const canvasdata = canvas.toDataURL(\"image/png\");\n      const a = document.createElement(\"a\");\n      a.download = \"Meme.png\";\n      a.href = canvasdata;\n      a.click();\n    }\n  }\n\n  render() {\n    var newDimension = this.setHeightAndWidth();\n\n    return (\n      <div className=\"app-container\">\n        <div className=\"sidebar-container\">\n          <h1>Meme maker</h1>\n          <hr />\n          <p> Click on any template image given in the gallery.</p>\n          <p> You can add top and bottom text to the meme-template, move the text around and can also download your meme as an image.</p>\n        </div>\n        <div className=\"gallery-container\">\n          {photos.map((photo, index) => (\n            <div className=\"image-container\" key={index}>\n              {this.state.isLoading[index] &&\n                <Spinner color='light' type='grow'></Spinner>}\n              <img\n                alt={index}\n                src={`${process.env.PUBLIC_URL}/${photo.src}`}\n                style={{ display: this.state.isLoading[index] ? 'none' : 'block' }}\n                onClick={() => { this.openImage(index) }}\n                onLoad={() => this.setState((prevState) => {\n                  const isLoading = [...prevState.isLoading];\n                  isLoading[index] = false;\n                  return { isLoading };\n                })}\n              />\n            </div>\n          ))}\n        </div>\n        <Modal isOpen={this.state.modalIsOpen} toggle={this.toggle} contentClassName=\"modal-container\">\n          <ModalHeader toggle={this.toggle}>Modal Header</ModalHeader>\n          <ModalBody className=\"modal-body-container\">\n            <svg id=\"svg-ref\" className=\"svg-container\" width={newDimension[0]} height={newDimension[1]}>\n              <image href={this.state.currentImageBase64} width={newDimension[0]} height={newDimension[1]} />\n              <text x={this.state.topX} y={this.state.topY} dominantBaseline=\"middle\" textAnchor=\"middle\" style={this.fontStyle}>{this.state.topText}</text>\n              <text x={this.state.bottomX} y={this.state.bottomY} dominantBaseline=\"middle\" textAnchor=\"middle\" style={this.fontStyle}>{this.state.bottomText}</text>\n            </svg>\n            <Form className=\"form-container\">\n              <FormGroup>\n                <Label for=\"toptext\">Top Text</Label>\n                <Input type=\"text\" name=\"toptext\" id=\"toptext\" placeholder=\"Enter top text\" onChange={this.updateTopTextValue} />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"bottomtext\">Bottom Text</Label>\n                <Input bsSize=\"large\" type=\"text\" name=\"bottomtext\" id=\"bottomtext\" placeholder=\"Enter bottom text\" onChange={this.updateBottomTextValue} />\n              </FormGroup>\n              <Button color=\"primary\" onClick={this.downloadMeme}>Download</Button>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default MemeMaker;","import React from 'react';\nimport './App.css';\nimport MemeMaker from './Components/MemeMaker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MemeMaker />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}