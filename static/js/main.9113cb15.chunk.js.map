{"version":3,"sources":["Components/MemeMaker.js","App.js","index.js"],"names":["photos","src","MemeMaker","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","toggle","setState","prevState","modalIsOpen","topText","bottomText","updateTopTextValue","event","text","document","getElementById","value","updateBottomTextValue","openImage","index","image","baseImage","Image","base64","getBase64Image","console","log","currentImage","currentImageBase64","canvas","createElement","width","height","getContext","drawImage","toDataURL","setHeightAndWidth","state","downloadMeme","svg","svgSize","getBoundingClientRect","img","svgData","XMLSerializer","serializeToString","setAttribute","btoa","onload","canvasdata","a","download","href","click","isTopDragging","isBottomDragging","topY","topX","bottomY","bottomX","fontStyle","fontFamily","fontSize","textTransform","fill","stroke","userSelect","_createClass","key","_this2","newDimension","this","React","className","map","photo","style","cursor","alt","onClick","Modal","isOpen","contentClassName","ModalHeader","ModalBody","id","x","y","dominantBaseline","textAnchor","Form","FormGroup","Label","for","Input","type","name","placeholder","onChange","bsSize","Button","color","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9113cb15.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, ModalHeader, ModalBody, Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst photos = [\n  { src: '/images/vict-baby.png' },\n  { src: '/images/ned.jpeg' },\n  { src: '/images/devilgirl.jpg' },\n  { src: '/images/trump.jpg' },\n  { src: '/images/one-does-not.jpg' },\n  { src: '/images/dank.png' },\n  { src: '/images/boy.png' },\n  { src: '/images/sad.png' },\n  { src: '/images/wolf.png' },\n  { src: '/images/fry.jpg' },\n  { src: '/images/jobs.jpg' },\n  { src: '/images/phone.jpg' },\n  { src: '/images/oldie.png' },\n  { src: '/images/image.png' },\n  { src: '/images/doubt.png' },\n  { src: '/images/crying.png' },\n  { src: '/images/sponge.png' },\n  { src: '/images/dog.png' },\n  { src: '/images/frust.png' },\n  { src: '/images/web.png' },\n  { src: '/images/penguin.png' }\n];\n\nclass MemeMaker extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currentImage: 0,\n      modalIsOpen: false,\n      currentImageBase64: null,\n      topText: '',\n      bottomText: '',\n      isTopDragging: false,\n      isBottomDragging: false,\n      topY: \"10%\",\n      topX: \"50%\",\n      bottomY: \"90%\",\n      bottomX: \"50%\"\n    };\n    this.fontStyle = {\n      fontFamily: \"Impact\",\n      fontSize: \"50px\",\n      textTransform: \"uppercase\",\n      fill: \"#FFF\",\n      stroke: \"#000\",\n      userSelect: \"none\"\n    }\n  }\n\n  toggle = () => {\n    this.setState((prevState) => ({\n      modalIsOpen: !prevState.modalIsOpen,\n      topText: '',\n      bottomText: ''\n    }));\n  }\n\n  updateTopTextValue = (event) => {\n    const text = document.getElementById(\"toptext\").value;\n    this.setState({\n      topText: text\n    });\n  }\n\n  updateBottomTextValue = (event) => {\n    const text = document.getElementById(\"bottomtext\").value;\n    this.setState({\n      bottomText: text\n    });\n  }\n\n  openImage = (index) => {\n    const image = photos[index];\n    const baseImage = new Image();\n    baseImage.src = image.src;\n    const\n      base64 = this.getBase64Image(baseImage);\n    console.log(base64);\n    this.setState((prevState) => ({\n      currentImage: index,\n      modalIsOpen: !prevState.modalIsOpen,\n      currentImageBase64: base64,\n    }));\n  }\n\n  getBase64Image = (image) => {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0);\n    const dataURL = canvas.toDataURL(\"image/png\");\n    return dataURL;\n  }\n\n  setHeightAndWidth = () => {\n    const image = photos[this.state.currentImage];\n    const baseImage = new Image();\n    baseImage.src = image.src;\n    const widthHeightRatio = baseImage.width / baseImage.height;\n    const newWidth = 600;\n    const newHeight = newWidth / widthHeightRatio;\n    return [newWidth, newHeight];\n  }\n\n  downloadMeme = () => {\n    const svg = document.getElementById(\"svg-ref\");\n    const canvas = document.createElement(\"canvas\");\n    const svgSize = svg.getBoundingClientRect();\n    canvas.width = svgSize.width;\n    canvas.height = svgSize.height;\n\n    const img = document.createElement(\"img\");\n    const svgData = new XMLSerializer().serializeToString(svg);\n    img.setAttribute(\"src\", \"data:image/svg+xml;base64,\" + btoa(svgData));\n\n    img.onload = function () {\n      canvas.getContext(\"2d\").drawImage(img, 0, 0);\n      const canvasdata = canvas.toDataURL(\"image/png\");\n      const a = document.createElement(\"a\");\n      a.download = \"Meme.png\";\n      a.href = canvasdata;\n      a.click();\n    }\n  }\n\n  render() {\n    var newDimension = this.setHeightAndWidth();\n    return (\n      <div className=\"app-container\">\n        <div className=\"sidebar-container\">\n          <h1>Meme maker</h1>\n          <hr />\n          <p> Click on any template image given in the gallery.</p>\n          <p> You can add top and bottom text to the meme-template, move the text around and can also download your meme as an image.</p>\n        </div>\n        <div className=\"gallery-container\">\n          {photos.map((photo, index) => (\n            <div className=\"image-container\" key={index}>\n              <img\n                style={{\n                  width: \"100%\",\n                  height: \"100%\",\n                  cursor: \"pointer\"\n                }}\n                alt={index}\n                src={photo.src}\n                onClick={() => { this.openImage(index) }} />\n            </div>\n          ))}\n        </div>\n        <Modal isOpen={this.state.modalIsOpen} toggle={this.toggle} contentClassName=\"modal-container\">\n          <ModalHeader toggle={this.toggle}>Modal Header</ModalHeader>\n          <ModalBody className=\"modal-body-container\">\n            <svg id=\"svg-ref\" className=\"svg-container\" width={newDimension[0]} height={newDimension[1]}>\n              <image href={this.state.currentImageBase64} width={newDimension[0]} height={newDimension[1]} />\n              <text x={this.state.topX} y={this.state.topY} dominantBaseline=\"middle\" textAnchor=\"middle\" style={this.fontStyle}>{this.state.topText}</text>\n              <text x={this.state.bottomX} y={this.state.bottomY} dominantBaseline=\"middle\" textAnchor=\"middle\" style={this.fontStyle}>{this.state.bottomText}</text>\n            </svg>\n            <Form className=\"form-container\">\n              <FormGroup>\n                <Label for=\"toptext\">Top Text</Label>\n                <Input type=\"text\" name=\"toptext\" id=\"toptext\" placeholder=\"Enter top text\" onChange={this.updateTopTextValue} />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"bottomtext\">Bottom Text</Label>\n                <Input bsSize=\"large\" type=\"text\" name=\"bottomtext\" id=\"bottomtext\" placeholder=\"Enter bottom text\" onChange={this.updateBottomTextValue} />\n              </FormGroup>\n              <Button color=\"primary\" onClick={this.downloadMeme}>Download</Button>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default MemeMaker;","import React from 'react';\nimport './App.css';\nimport MemeMaker from './Components/MemeMaker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MemeMaker />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}